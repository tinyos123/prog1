class Color {
    constructor(r,g,b,a) {
        try {
            if ((typeof(r) !== "number") || (typeof(g) !== "number") || (typeof(b) !== "number") || (typeof(a) !== "number"))
                throw "color component not a number";
            else if ((r<0) || (g<0) || (b<0) || (a<0))
                throw "color component less than 0";
            else if ((r>255) || (g>255) || (b>255) || (a>255))
                throw "color component bigger than 255";
            else {
                this.r = r; this.g = g; this.b = b; this.a = a;
            }
        } // end try

        catch (e) {
            console.log(e);
        }
    } // end Color constructor

        // Color change method
    change(r,g,b,a) {
        try {
            if ((typeof(r) !== "number") || (typeof(g) !== "number") || (typeof(b) !== "number") || (typeof(a) !== "number"))
                throw "color component not a number";
            else if ((r<0) || (g<0) || (b<0) || (a<0))
                throw "color component less than 0";
            else if ((r>255) || (g>255) || (b>255) || (a>255))
                throw "color component bigger than 255";
            else {
                this.r = r; this.g = g; this.b = b; this.a = a;
            }
        } // end throw

        catch (e) {
            console.log(e);
        }
    } // end Color change method
} // end color class


/* utility functions */

// draw a pixel at x,y using color
function drawPixel(imagedata,x,y,color) {
    try {
        if ((typeof(x) !== "number") || (typeof(y) !== "number"))
            throw "drawpixel location not a number";
        else if ((x<0) || (y<0) || (x>=imagedata.width) || (y>=imagedata.height))
            throw "drawpixel location outside of image";
        else if (color instanceof Color) {
            var pixelindex = (y*imagedata.width + x) * 4;
            imagedata.data[pixelindex] = color.r;
            imagedata.data[pixelindex+1] = color.g;
            imagedata.data[pixelindex+2] = color.b;
            imagedata.data[pixelindex+3] = color.a;
        } else
            throw "drawpixel color is not a Color";
    } // end try

    catch(e) {
        console.log(e);
    }
} // end drawPixel

// draw random pixels
function drawRandPixels(context) {
    var c = new Color(0,0,0,0); // the color at the pixel: black
    var w = context.canvas.width;
    var h = context.canvas.height;
    var imagedata = context.createImageData(w,h);
    const PIXEL_DENSITY = 0.01;
    var numPixels = (w*h)*PIXEL_DENSITY;

    // Loop over 1% of the pixels in the image
    for (var x=0; x<numPixels; x++) {
        c.change(Math.random()*255,Math.random()*255,
            Math.random()*255,255); // rand color
        drawPixel(imagedata,
            Math.floor(Math.random()*w),
            Math.floor(Math.random()*h),
                c);
    } // end for x
    context.putImageData(imagedata, 0, 0);
} // end draw random pixels

// get the input ellipsoids from the standard class URL
function getInputEllipsoids() {
    const INPUT_ELLIPSOIDS_URL =
        "https://ncsucgclass.github.io/prog1/ellipsoids.json";

    // load the ellipsoids file
    var httpReq = new XMLHttpRequest(); // a new http request
    httpReq.open("GET",INPUT_ELLIPSOIDS_URL,false); // init the request
    httpReq.send(null); // send the request
    var startTime = Date.now();
    while ((httpReq.status !== 200) && (httpReq.readyState !== XMLHttpRequest.DONE)) {
        if ((Date.now()-startTime) > 3000)
            break;
    } // until its loaded or we time out after three seconds
    if ((httpReq.status !== 200) || (httpReq.readyState !== XMLHttpRequest.DONE)) {
        console.log*("Unable to open input ellipses file!");
        return String.null;
    } else
        return JSON.parse(httpReq.response);
} // end get input ellipsoids

//get the input triangles from the standard class URL
function getInputTriangles() {
    const INPUT_TRIANGLES_URL =
        "https://ncsucgclass.github.io/prog1/triangles.json";

    // load the triangles file
    var httpReq = new XMLHttpRequest(); // a new http request
    httpReq.open("GET",INPUT_TRIANGLES_URL,false); // init the request
    httpReq.send(null); // send the request
    var startTime = Date.now();
    while ((httpReq.status !== 200) && (httpReq.readyState !== XMLHttpRequest.DONE)) {
        if ((Date.now()-startTime) > 3000)
            break;
    } // until its loaded or we time out after three seconds
    if ((httpReq.status !== 200) || (httpReq.readyState !== XMLHttpRequest.DONE)) {
        console.log*("Unable to open input triangles file!");
        return String.null;
    } else
        return JSON.parse(httpReq.response);
} // end get input triangles

// put random points in the ellipsoids from the class github
function drawRandPixelsInInputEllipsoids(context) {
    var inputEllipsoids = getInputEllipsoids();
    var w = context.canvas.width;
    var h = context.canvas.height;
    var imagedata = context.createImageData(w,h);
    const PIXEL_DENSITY = 0.1;
    var numCanvasPixels = (w*h)*PIXEL_DENSITY;

    if (inputEllipsoids != String.null) {
        var x = 0; var y = 0; // pixel coord init
        var cx = 0; var cy = 0; // init center x and y coord
        var ellipsoidXRadius = 0; // init ellipsoid x radius
        var ellipsoidYRadius = 0; // init ellipsoid y radius
        var numEllipsoidPixels = 0; // init num pixels in ellipsoid
        var c = new Color(0,0,0,0); // init the ellipsoid color
        var n = inputEllipsoids.length; // the number of input ellipsoids
        //console.log("number of ellipses: " + n);

        // Loop over the ellipsoids, draw rand pixels in each
        for (var e=0; e<n; e++) {
            cx = w*inputEllipsoids[e].x; // ellipsoid center x
            cy = h*inputEllipsoids[e].y; // ellipsoid center y
            ellipsoidXRadius = Math.round(w*inputEllipsoids[e].a); // x radius
            ellipsoidYRadius = Math.round(h*inputEllipsoids[e].b); // y radius
            numEllipsoidPixels = ellipsoidXRadius*ellipsoidYRadius*Math.PI; // projected ellipsoid area
            numEllipsoidPixels *= PIXEL_DENSITY; // percentage of ellipsoid area to render to pixels
            numEllipsoidPixels = Math.round(numEllipsoidPixels);
            //console.log("ellipsoid x radius: "+ellipsoidXRadius);
            //console.log("ellipsoid y radius: "+ellipsoidYRadius);
            //console.log("num ellipsoid pixels: "+numEllipsoidPixels);
            c.change(
                inputEllipsoids[e].diffuse[0]*255,
                inputEllipsoids[e].diffuse[1]*255,
                inputEllipsoids[e].diffuse[2]*255,
                255); // ellipsoid diffuse color
            for (var p=0; p<numEllipsoidPixels; p++) {
                do {
                    x = Math.random()*2 - 1; // in unit square
                    y = Math.random()*2 - 1; // in unit square
                } while (Math.sqrt(x*x + y*y) > 1) // a circle is also an ellipse
                drawPixel(imagedata,
                    cx+Math.round(x*ellipsoidXRadius),
                    cy+Math.round(y*ellipsoidYRadius),c);
                //console.log("color: ("+c.r+","+c.g+","+c.b+")");
                //console.log("x: "+Math.round(w*inputEllipsoids[e].x));
                //console.log("y: "+Math.round(h*inputEllipsoids[e].y));
            } // end for pixels in ellipsoid
        } // end for ellipsoids
        context.putImageData(imagedata, 0, 0);
    } // end if ellipsoids found
} // end draw rand pixels in input ellipsoids

// draw 2d projections read from the JSON file at class github
function drawInputEllipsoidsUsingArcs(context) {
    var inputEllipsoids = getInputEllipsoids();


    if (inputEllipsoids != String.null) {
        var c = new Color(0,0,0,0); // the color at the pixel: black
        var w = context.canvas.width;
        var h = context.canvas.height;
        var n = inputEllipsoids.length;
        //console.log("number of ellipsoids: " + n);

        // Loop over the ellipsoids, draw each in 2d
        for (var e=0; e<n; e++) {
            context.fillStyle =
                "rgb(" + Math.floor(inputEllipsoids[e].diffuse[0]*255)
                +","+ Math.floor(inputEllipsoids[e].diffuse[1]*255)
                +","+ Math.floor(inputEllipsoids[e].diffuse[2]*255) +")"; // diffuse color
            context.save(); // remember previous (non-) scale
            context.scale(1, inputEllipsoids[e].b/inputEllipsoids[e].a); // scale by ellipsoid ratio
            context.beginPath();
            context.arc(
                Math.round(w*inputEllipsoids[e].x),
                Math.round(h*inputEllipsoids[e].y),
                Math.round(w*inputEllipsoids[e].a),
                0,2*Math.PI);
            context.restore(); // undo scale before fill so stroke width unscaled
            context.fill();
            //console.log(context.fillStyle);
            //console.log("x: "+Math.round(w*inputEllipsoids[e].x));
            //console.log("y: "+Math.round(h*inputEllipsoids[e].y));
            //console.log("a: "+Math.round(w*inputEllipsoids[e].a));
            //console.log("b: "+Math.round(h*inputEllipsoids[e].b));
        } // end for ellipsoids
    } // end if ellipsoids found
} // end draw input ellipsoids

//put random points in the triangles from the class github
function drawRandPixelsInInputTriangles(context) {
    var inputTriangles = getInputTriangles();
    var w = context.canvas.width;
    var h = context.canvas.height;
    //console.log(w);
    //console.log(h);
    var imagedata = context.createImageData(w,h);
    const PIXEL_DENSITY = 0.2;
    var numCanvasPixels = (w*h)*PIXEL_DENSITY;

    if (inputTriangles != String.null) {
        var x = 0; var y = 0; // pixel coord init
        var cx = 0; var cy = 0; // init center x and y coord
        var numTrianglePixels = 0; // init num pixels in triangle
        var c = new Color(0,0,0,0); // init the triangle color
        var n = inputTriangles.length; // the number of input files
        //console.log("number of files: " + n);
        //console.log(inputTriangles[1]);

        // Loop over the triangles, draw rand pixels in each

        //FILE LOOP
        for (var f=0; f<n; f++) {
        	var tn = inputTriangles[f].triangles.length;
        	//console.log("number of triangles in this files: " + tn);

        	// Loop over the triangles, draw each in 2d
          //TRIANGLE LOOP
        	for(var t=0; t<tn; t++){
        		var vertex1 = inputTriangles[f].triangles[t][0];
        		var vertex2 = inputTriangles[f].triangles[t][1];
        		var vertex3 = inputTriangles[f].triangles[t][2];

        		var vertexPos1 = inputTriangles[f].vertices[vertex1];
        		var vertexPos2 = inputTriangles[f].vertices[vertex2];
        		var vertexPos3 = inputTriangles[f].vertices[vertex3];
        		//console.log("vertexPos1 " + vertexPos1);
        		//console.log("vertexPos2 " + vertexPos2);
        		//console.log("vertexPos3 " + vertexPos3);

        		// triangle position on canvas

        		var v1 = [w*vertexPos1[0], h*vertexPos1[1]];
        		var v2 = [w*vertexPos2[0], h*vertexPos2[1]];
        		var v3 = [w*vertexPos3[0], h*vertexPos3[1]];

        		// calculate triangle area on canvas (shoelace formula)
        		var triangleArea = 0.5*Math.abs(v1[0]*v2[1]+v2[0]*v3[1]+v3[0]*v1[1]-v2[0]*v1[1]-v3[0]*v2[1]-v1[0]*v3[1]);
        		var numTrianglePixels = triangleArea; // init num pixels in triangle
            	//console.log("triangle area " + triangleArea);
            	numTrianglePixels *= PIXEL_DENSITY; // percentage of triangle area to render to pixels
            	numTrianglePixels = Math.round(numTrianglePixels);
            	// console.log("numTrianglePixels " + numTrianglePixels);
            	c.change(
            		inputTriangles[f].material.diffuse[0]*255,
                	inputTriangles[f].material.diffuse[1]*255,
                	inputTriangles[f].material.diffuse[2]*255,
                	255); // triangle diffuse color
            	for (var p=0; p<numTrianglePixels; p++) {
                    var point; // on canvas plane
            		var triangleTest = 0;
            		while (triangleTest == 0 ){ //if the pixel outside the triangle

            			point = [Math.floor(Math.random()*w), Math.floor(Math.random()*h)];
                    	// plane checking

                    	var t1 = ((point[0]-v2[0]) * (v1[1] - v2[1]) - (v1[0] - v2[0]) * (point[1] - v2[1])) < 0.0;
                    	var t2 = ((point[0]-v3[0]) * (v2[1] - v3[1]) - (v2[0] - v3[0]) * (point[1] - v3[1])) < 0.0;
                    	var t3 = ((point[0]-v1[0]) * (v3[1] - v1[1]) - (v3[0] - v1[0]) * (point[1] - v1[1])) < 0.0;

                    	if((t1==t2)&&(t2==t3)) // draw the pixel if inside the triangle
                    		triangleTest = 1;
            		}
            		drawPixel(imagedata,point[0],point[1],c);
                	//console.log("color: ("+c.r+","+c.g+","+c.b+")");
                	//console.log("x: "+ x);
                	//console.log("y: "+ y);
            	} // end for pixels in triangle
        	} // end for triangles
    	} // end for files
        context.putImageData(imagedata, 0, 0);
    } // end if triangle file found
} // end draw rand pixels in input triangles

//draw 2d projections traingle from the JSON file at class github
function drawInputTrainglesUsingPaths(context) {
    var inputTriangles = getInputTriangles();

    if (inputTriangles != String.null) {
        var c = new Color(0,0,0,0); // the color at the pixel: black
        var w = context.canvas.width;
        var h = context.canvas.height;
        var n = inputTriangles.length;
        //console.log("number of files: " + n);

        // Loop over the input files
        for (var f=0; f<n; f++) {
        	var tn = inputTriangles[f].triangles.length;
        	//console.log("number of triangles in this files: " + tn);

        	// Loop over the triangles, draw each in 2d
        	for(var t=0; t<tn; t++){
        		var vertex1 = inputTriangles[f].triangles[t][0];
        		var vertex2 = inputTriangles[f].triangles[t][1];
        		var vertex3 = inputTriangles[f].triangles[t][2];

        		var vertexPos1 = inputTriangles[f].vertices[vertex1];
        		var vertexPos2 = inputTriangles[f].vertices[vertex2];
        		var vertexPos3 = inputTriangles[f].vertices[vertex3];
        		//console.log("vertexPos1 " + vertexPos1);
        		//console.log("vertexPos2 " + vertexPos2);
        		//console.log("vertexPos3 " + vertexPos3);

            	context.fillStyle =
            	    "rgb(" + Math.floor(inputTriangles[f].material.diffuse[0]*255)
            	    +","+ Math.floor(inputTriangles[f].material.diffuse[1]*255)
            	    +","+ Math.floor(inputTriangles[f].material.diffuse[2]*255) +")"; // diffuse color

            	var path=new Path2D();
            	path.moveTo(w*vertexPos1[0],h*vertexPos1[1]);
            	path.lineTo(w*vertexPos2[0],h*vertexPos2[1]);
            	path.lineTo(w*vertexPos3[0],h*vertexPos3[1]);
            	path.closePath();
            	context.fill(path);

        	} // end for triangles
        } // end for files
    } // end if triangle files found
} // end draw input triangles

function drawRayCastedImage(context){
    var inputTriangles = getInputTriangles();
    var w = context.canvas.width;
    var h = context.canvas.height;
    var d = w;
    var imagedata = context.createImageData(w,h);

    if (inputTriangles != String.null) {
      var c = new Color(0,0,0,0);
      var n = inputTriangles.length;

      var windowSquarePosition = [0, 0, 0];
      var windowSize = [1,1];
      var windowSizeCanvas = [w*windowSize[0], h*windowSize[1]];
      //console.log(windowSizeCanvas);
      var eyePosition = [0.5, 0.5, -0.5];
      var eyePositionCanvas = [w*eyePosition[0], h*eyePosition[1], d*eyePosition[2]];
      //console.log(eyePositionCanvas);
      var windowZ = 0;
      for(var windowX = 0; windowX < windowSizeCanvas[0]; windowX++){
        for(var windowY = 0; windowY < windowSizeCanvas[1]; windowY++){
          c.change(Math.random()*255,Math.random()*255,Math.random()*255,255);
          drawPixel(imagedata, windowX, windowY, c);
          context.putImageData(imagedata, 0, 0);

          //console.log(windowX + ", " + windowY + ", " + windowZ);
          //Get ray equation from eyePositionCanvas and windowX, windowY, windowZ
          var rayVector = [windowX - eyePositionCanvas[0], windowY - eyePositionCanvas[1], windowZ - eyePositionCanvas[2]];
          //console.log(rayVector[0] + ", " + rayVector[1]);
          //FILE LOOP
          for (var f=0; f<n; f++) {
            var tn = inputTriangles[f].triangles.length;
            c.change(
              inputTriangles[f].material.diffuse[0]*255,
                inputTriangles[f].material.diffuse[1]*255,
                inputTriangles[f].material.diffuse[2]*255,
                255);
            //TRIANGLE LOOP
            for(var t=0; t<tn; t++){
              // console.log(f + " + " + t);
              //GET VERTEX INDICES
              var vertex1 = inputTriangles[f].triangles[t][0];
              var vertex2 = inputTriangles[f].triangles[t][1];
              var vertex3 = inputTriangles[f].triangles[t][2];
              //GET VERTEX INDEX VALUES
              var vertexPos1 = inputTriangles[f].vertices[vertex1];
              var vertexPos2 = inputTriangles[f].vertices[vertex2];
              var vertexPos3 = inputTriangles[f].vertices[vertex3];

              //TRIANGLE ON CANVAS
              vertexPos1 = [w*vertexPos1[0], h*vertexPos1[1], d*vertexPos1[2]];
          		vertexPos2 = [w*vertexPos2[0], h*vertexPos2[1], d*vertexPos2[2]];
          		vertexPos3 = [w*vertexPos3[0], h*vertexPos3[1], d*vertexPos3[2]];
              //FIND EQUATIONS OF TWO LINES USING THREE POINTS
              var line1 = [vertexPos2[0] - vertexPos1[0], vertexPos2[1] - vertexPos1[1], vertexPos2[2] - vertexPos1[2]];
              var line2 = [vertexPos3[0] - vertexPos2[0], vertexPos3[1] - vertexPos2[1], vertexPos3[2] - vertexPos2[2]];

              //COMPUTE THE NORMAL TO THE TRIANGLE PLANE USING LINE1 and LINE2 VECTOR PRODUCT
              var normal = [line1[1]*line2[2] - line1[2]*line2[1], line1[0]*line2[2] - line1[2]*line2[0], line1[0]*line2[1] - line1[1]*line2[0]];

              //COMPUTE INTERSECTION OF PLANE AND LINE
              //A, B, C
              //.toFixed rounds it to 2 decimal places
              var planeA = normal[0].toFixed(2);
              var planeB = normal[1].toFixed(2);
              var planeC = normal[2].toFixed(2);
              //d = Ax1 + By1 + Cz1
              var planeD = planeA*vertexPos1[0] + planeB*vertexPos1[1] + planeC*vertexPos1[2];
              planeD = planeD.toFixed(2);

              var numerator = planeD - (planeA*eyePositionCanvas[0] + planeB*eyePositionCanvas[1] + planeC*eyePositionCanvas[2]);
              var denominator = planeA*(windowX - eyePositionCanvas[0]) + planeB*(windowY - eyePositionCanvas[1]) + planeC*(windowZ - eyePositionCanvas[1]);

              //HANDLE 0/0 FORM
              var lineT = numerator/denominator;
              console.log(lineT);
              //console.log(windowX + ", " + windowY);

              //INTERSECTION POINT
              var intersectionX = eyePositionCanvas[0] + (windowX - eyePositionCanvas[0])*lineT;
              var intersectionY = eyePositionCanvas[1] + (windowY - eyePositionCanvas[1])*lineT;
              var intersectionZ = eyePositionCanvas[2] + (windowZ - eyePositionCanvas[2])*lineT;
              //console.log(intersectionX + " " + intersectionY + " " + intersectionZ);

              //MAKE SURE WINDOW IS BETWEEN TRIANGLE AND EYE


              //Check if intersection is inside triangle
              //We compute area of the three triangles formed and check if it equals the area of the original triangle

              //v1v2intersection
              var vectorV1Intersection = [intersectionX - vertexPos1[0], intersectionY - vertexPos1[1], intersectionZ - vertexPos1[2]];
              var vectorV2Intersection = [intersectionX - vertexPos2[0], intersectionY - vertexPos2[1], intersectionZ - vertexPos2[2]];
              var area1 = areaOfTriangle(vectorV1Intersection[0], vectorV1Intersection[1], vectorV1Intersection[2], vectorV2Intersection[0], vectorV2Intersection[1], vectorV2Intersection[2]);

              //v2v3intersection
              var vectorV2Intersection = [intersectionX - vertexPos2[0], intersectionY - vertexPos2[1], intersectionZ - vertexPos2[2]];
              var vectorV3Intersection = [intersectionX - vertexPos3[0], intersectionY - vertexPos3[1], intersectionZ - vertexPos3[2]];
              var area2 = areaOfTriangle(vectorV2Intersection[0], vectorV2Intersection[1], vectorV2Intersection[2], vectorV3Intersection[0], vectorV3Intersection[1], vectorV3Intersection[2]);

              //v3v1intersection
              var vectorV3Intersection = [intersectionX - vertexPos3[0], intersectionY - vertexPos3[1], intersectionZ - vertexPos3[2]];
              var vectorV1Intersection = [intersectionX - vertexPos1[0], intersectionY - vertexPos1[1], intersectionZ - vertexPos1[2]];
              var area3 = areaOfTriangle(vectorV3Intersection[0], vectorV3Intersection[1], vectorV3Intersection[2], vectorV1Intersection[0], vectorV1Intersection[1], vectorV1Intersection[2]);

              //v1v2v3
              var vectorV1V2 = [vertexPos2[0] - vertexPos1[0], vertexPos2[1] - vertexPos1[1], vertexPos2[2] - vertexPos1[2]];
              var vectorV1V3 = [vertexPos3[0] - vertexPos1[0], vertexPos3[1] - vertexPos1[1], vertexPos3[2] - vertexPos1[2]];
              var areaFinal = areaOfTriangle(vectorV1V2[0], vectorV1V2[1], vectorV1V2[2], vectorV1V3[0], vectorV1V3[1], vectorV1V3[2]);

              //Point is inside if areaFinal is equal to sum of other areas
              var sum = area1 + area2 + area3;
              //console.log(areaFinal);
              //console.log(sum);
              if(area1 + area2 + area3 == areaFinal){
                console.log("yes");
              }else{
                //console.log("Nah");
              }
              //drawPixel(imagedata,point[0],point[1],c);
            }
          }
          context.putImageData(imagedata, 0, 0);
        }
      }
    }
}

//Pass two vectors AB AC from triangle ABC and return area of said triangle
function areaOfTriangle(x1, y1, z1, x2, y2, z2){
    return 0.5*(Math.sqrt(Math.pow((y1*z2 - z1*y2), 2) + Math.pow((z1*x2 - x1*z2), 2) + Math.pow((x1*y2 - y1*x2), 2)));
}
function lineDraw(context){
  var c = new Color(245,120,120,120);
  var imagedata = context.createImageData(1024,1024);
  for(var x = 0; x < 1000; x ++){
    for(var y = 0; y < 1000; y++){
      //c.change(Math.random()*255,Math.random()*255,Math.random()*255,255);
        drawPixel(imagedata, x, y, c);
      //console.log(x);
    }
  }
  context.putImageData(imagedata, 0, 0);
}
function main() {
    // Get the canvas and context
    var canvas = document.getElementById("viewport");
    var context = canvas.getContext("2d");
    // Create the image
    //drawRandPixels(context);
      // shows how to draw pixels
    //drawRandPixelsInInputEllipsoids(context);
      // shows how to draw pixels and read input file
    //drawInputEllipsoidsUsingArcs(context);
      // shows how to read input file, but not how to draw pixels
    //drawRandPixelsInInputTriangles(context);
    // shows how to draw pixels and read input file
    //console.log(areaOfTriangle(0,3,0,3,0,0));
    drawRayCastedImage(context);
    //lineDraw(context);
    //drawInputTrainglesUsingPaths(context);
    // shows how to read input file, but not how to draw pixels
}
