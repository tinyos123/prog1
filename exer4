class Color {

    // Color constructor default opaque black
    constructor(r = 0, g = 0, b = 0, a = 255) {
        try {
            if ((typeof(r) !== "number") || (typeof(g) !== "number") || (typeof(b) !== "number") || (typeof(a) !== "number"))
                throw "color component not a number";
            else if ((r < 0) || (g < 0) || (b < 0) || (a < 0))
                throw "color component less than 0";
            else if ((r > 255) || (g > 255) || (b > 255) || (a > 255))
                throw "color component bigger than 255";
            else {
                this.r = r;
                this.g = g;
                this.b = b;
                this.a = a;
            }
        } // end try

        catch (e) {
            console.log(e);
        }
    } // end Color constructor

    // Color change method
    change(r, g, b, a) {
        try {
            if ((typeof(r) !== "number") || (typeof(g) !== "number") || (typeof(b) !== "number") || (typeof(a) !== "number"))
                throw "color component not a number";
            else if ((r < 0) || (g < 0) || (b < 0) || (a < 0))
                throw "color component less than 0";
            else if ((r > 255) || (g > 255) || (b > 255) || (a > 255))
                throw "color component bigger than 255";
            else {
                this.r = r;
                this.g = g;
                this.b = b;
                this.a = a;
                return (this);
            }
        } // end throw

        catch (e) {
            console.log(e);
        }
    } // end Color change method

    // Color add method
    add(c) {
        try {
            if (!(c instanceof Color))
                throw "Color.add: non-color parameter";
            else {
                this.r += c.r;
                this.g += c.g;
                this.b += c.b;
                this.a += c.a;
                return (this);
            }
        } // end try

        catch (e) {
            console.log(e);
        }
    } // end color add

    // Color subtract method
    subtract(c) {
        try {
            if (!(c instanceof Color))
                throw "Color.subtract: non-color parameter";
            else {
                this.r -= c.r;
                this.g -= c.g;
                this.b -= c.b;
                this.a -= c.a;
                return (this);
            }
        } // end try

        catch (e) {
            console.log(e);
        }
    } // end color subgtract

    // Color scale method
    scale(s) {
        try {
            if (typeof(s) !== "number")
                throw "scale factor not a number";
            else {
                this.r *= s;
                this.g *= s;
                this.b *= s;
                this.a *= s;
                return (this);
            }
        } // end throw

        catch (e) {
            console.log(e);
        }
    } // end Color scale method

    // Color copy method
    copy(c) {
        try {
            if (!(c instanceof Color))
                throw "Color.copy: non-color parameter";
            else {
                this.r = c.r;
                this.g = c.g;
                this.b = c.b;
                this.a = c.a;
                return (this);
            }
        } // end try

        catch (e) {
            console.log(e);
        }
    } // end Color copy method

    // Color clone method
    clone() {
        var newColor = new Color();
        newColor.copy(this);
        return (newColor);
    } // end Color clone method

    // Send color to console
    toConsole() {
        console.log("rgba: " + this.r + " " + this.g + " " + this.b + " " + this.a);
    }  // end Color toConsole

} // end color class

class Vector {
    constructor(x = 0, y = 0, z = 0) {
        this.set(x, y, z);
    } // end constructor

    // sets the components of a vector
    set(x, y, z) {
        try {
            if ((typeof(x) !== "number") || (typeof(y) !== "number") || (typeof(z) !== "number"))
                throw "vector component not a number";
            else
                this.x = x;
            this.y = y;
            this.z = z;
        } // end try

        catch (e) {
            console.log(e);
        }
    } // end vector set

    // copy the passed vector into this one
    copy(v) {
        try {
            if (!(v instanceof Vector))
                throw "Vector.copy: non-vector parameter";
            else
                this.x = v.x;
            this.y = v.y;
            this.z = v.z;
        } // end try

        catch (e) {
            console.log(e);
        }
    }

    toConsole(prefix) {
        console.log(prefix + "[" + this.x + "," + this.y + "," + this.z + "]");
    } // end to console

    // static dot method
    static dot(v1, v2) {
        try {
            if (!(v1 instanceof Vector) || !(v2 instanceof Vector))
                throw "Vector.dot: non-vector parameter";
            else
                return (v1.x * v2.x + v1.y * v2.y + v1.z * v2.z);
        } // end try

        catch (e) {
            console.log(e);
            return (NaN);
        }
    } // end dot static method

    // static add method
    static add(v1, v2) {
        try {
            if (!(v1 instanceof Vector) || !(v2 instanceof Vector))
                throw "Vector.add: non-vector parameter";
            else
                return (new Vector(v1.x + v2.x, v1.y + v2.y, v1.z + v2.z));
        } // end try

        catch (e) {
            console.log(e);
            return (new Vector(NaN, NaN, NaN));
        }
    } // end add static method

    // static subtract method, v1-v2
    static subtract(v1, v2) {
        try {
            if (!(v1 instanceof Vector) || !(v2 instanceof Vector))
                throw "Vector.subtract: non-vector parameter";
            else {
                var v = new Vector(v1.x - v2.x, v1.y - v2.y, v1.z - v2.z);
                //v.toConsole("Vector.subtract: ");
                return (v);
            }
        } // end try

        catch (e) {
            console.log(e);
            return (new Vector(NaN, NaN, NaN));
        }
    } // end subtract static method

    // static scale method
    static scale(c, v) {
        try {
            if (!(typeof(c) === "number") || !(v instanceof Vector))
                throw "Vector.scale: malformed parameter";
            else
                return (new Vector(c * v.x, c * v.y, c * v.z));
        } // end try

        catch (e) {
            console.log(e);
            return (new Vector(NaN, NaN, NaN));
        }
    } // end scale static method

    // static normalize method
    static normalize(v) {
        try {
            if (!(v instanceof Vector))
                throw "Vector.normalize: parameter not a vector";
            else {
                var lenDenom = 1 / Math.sqrt(Vector.dot(v, v));
                return (Vector.scale(lenDenom, v));
            }
        } // end try

        catch (e) {
            console.log(e);
            return (new Vector(NaN, NaN, NaN));
        }
    } // end scale static method

} // end Vector class


/* utility functions */

// draw a pixel at x,y using color
function drawPixel(imagedata, x, y, color) {
    try {
        if ((typeof(x) !== "number") || (typeof(y) !== "number"))
            throw "drawpixel location not a number";
        else if ((x < 0) || (y < 0) || (x >= imagedata.width) || (y >= imagedata.height))
            throw "drawpixel location outside of image";
        else if (color instanceof Color) {
            var pixelindex = (y * imagedata.width + x) * 4;
            imagedata.data[pixelindex] = color.r;
            imagedata.data[pixelindex + 1] = color.g;
            imagedata.data[pixelindex + 2] = color.b;
            imagedata.data[pixelindex + 3] = color.a;
        } else
            throw "drawpixel color is not a Color";
    } // end try

    catch (e) {
        console.log(e);
    }
} // end drawPixel

// draw random pixels
function drawRandPixels(context) {
    var c = new Color(0, 0, 0, 0); // the color at the pixel: black
    var w = context.canvas.width;
    var h = context.canvas.height;
    var imagedata = context.createImageData(w, h);
    const PIXEL_DENSITY = 0.01;
    var numPixels = (w * h) * PIXEL_DENSITY;

    // Loop over 1% of the pixels in the image
    for (var x = 0; x < numPixels; x++) {
        c.change(Math.random() * 255, Math.random() * 255,
            Math.random() * 255, 255); // rand color
        drawPixel(imagedata,
            Math.floor(Math.random() * w),
            Math.floor(Math.random() * h),
            c);
    } // end for x
    context.putImageData(imagedata, 0, 0);
} // end draw random pixels

// get the input ellipsoids from the standard class URL
function getInputParameters(url) {
    const INPUT_ELLIPSOIDS_URL = url;

    // load the ellipsoids file
    var httpReq = new XMLHttpRequest(); // a new http request
    httpReq.open("GET", INPUT_ELLIPSOIDS_URL, false); // init the request
    httpReq.send(null); // send the request
    var startTime = Date.now();
    while ((httpReq.status !== 200) && (httpReq.readyState !== XMLHttpRequest.DONE)) {
        if ((Date.now() - startTime) > 3000)
            break;
    } // until its loaded or we time out after three seconds
    if ((httpReq.status !== 200) || (httpReq.readyState !== XMLHttpRequest.DONE)) {
        console.log * ("Unable to open input ellipses file!");
        return String.null;
    } else
        return JSON.parse(httpReq.response);
} // end get input ellipsoids

// put random points in the ellipsoids from the class github
function drawRandPixelsInInputEllipsoids(context) {
    var inputEllipsoids = getInputEllipsoids();
    var w = context.canvas.width;
    var h = context.canvas.height;
    var imagedata = context.createImageData(w, h);
    const PIXEL_DENSITY = 1;
    var numCanvasPixels = (w * h) * PIXEL_DENSITY;

    if (inputEllipsoids != String.null) {
        var x = 0;
        var y = 0; // pixel coord init
        var cx = 0;
        var cy = 0; // init center x and y coord
        var ellipsoidXRadius = 0; // init ellipsoid x radius
        var ellipsoidYRadius = 0; // init ellipsoid y radius
        var numEllipsoidPixels = 0; // init num pixels in ellipsoid
        var c = new Color(0, 0, 0, 0); // init the ellipsoid color
        var n = inputEllipsoids.length; // the number of input ellipsoids
        //console.log("number of ellipses: " + n);

        // Loop over the ellipsoids, draw rand pixels in each
        for (var e = 0; e < n; e++) {
            cx = w * inputEllipsoids[e].x; // ellipsoid center x
            cy = h * inputEllipsoids[e].y; // ellipsoid center y
            ellipsoidXRadius = Math.round(w * inputEllipsoids[e].a); // x radius
            ellipsoidYRadius = Math.round(h * inputEllipsoids[e].b); // y radius
            numEllipsoidPixels = inputEllipsoids[e].a * inputEllipsoids[e].b * Math.PI; // projected ellipsoid area
            numEllipsoidPixels *= PIXEL_DENSITY * w * h; // percentage of ellipsoid area to render to pixels
            numEllipsoidPixels = Math.round(numEllipsoidPixels);
            console.log("ellipsoid x radius: " + ellipsoidXRadius);
            console.log("ellipsoid y radius: " + ellipsoidYRadius);
            console.log("num ellipsoid pixels: " + numEllipsoidPixels);
            c.change(
                inputEllipsoids[e].diffuse[0] * 255,
                inputEllipsoids[e].diffuse[1] * 255,
                inputEllipsoids[e].diffuse[2] * 255,
                255); // ellipsoid diffuse color
            for (var p = 0; p < numEllipsoidPixels; p++) {
                do {
                    x = Math.random() * 2 - 1; // in unit square
                    y = Math.random() * 2 - 1; // in unit square
                } while (Math.sqrt(x * x + y * y) > 1) // a circle is also an ellipse
                drawPixel(imagedata,
                    cx + Math.round(x * ellipsoidXRadius),
                    cy + Math.round(y * ellipsoidYRadius), c);
                //console.log("color: ("+c.r+","+c.g+","+c.b+")");
                //console.log("x: "+Math.round(w*inputEllipsoids[e].x));
                //console.log("y: "+Math.round(h*inputEllipsoids[e].y));
            } // end for pixels in ellipsoid
        } // end for ellipsoids
        context.putImageData(imagedata, 0, 0);
    } // end if ellipsoids found
} // end draw rand pixels in input ellipsoids

const PART1 = 0;
const PART2 = 1;
const NO_SHADE = false;
const WITH_SHADE = true;

function raycasting(context, eye, mode, withshade) {
    var inputEllipsoids = getInputParameters("https://ncsucgclass.github.io/prog1/ellipsoids.json");
    var light = getInputParameters("https://ncsucgclass.github.io/prog1/lights.json");
    var w = context.canvas.width;
    var h = context.canvas.height;
    var imagedata = context.createImageData(w, h);
    var n = inputEllipsoids.length;
    var c = new Color(0, 0, 0, 0);

    if (inputEllipsoids != String.null && light != String.null) {
        var ambColor = new Color();
        var difColor = new Color();
        var speColor = new Color();
        var lightPos = new Vector(light[0].x, light[0].y, light[0].z);

        for (var x = 0; x <= 1; x += 1 / w) {
            for (var y = 0; y <= 1; y += 1 / h) {
                var P = new Vector(x, y, 0);
                var D = Vector.subtract(P, eye);
                var min_t = 1000000;
                var which_ellip = -1;
                for (var e = 0; e < n; e++) {
                    var center = new Vector(inputEllipsoids[e].x, inputEllipsoids[e].y, inputEllipsoids[e].z);
                    var t = valueOf_t(eye, D, center, inputEllipsoids[e].a, inputEllipsoids[e].b, inputEllipsoids[e].c);
                    if (t === false) {
                        continue;
                    } else if (typeof t === "number") {
                        if (t < 1) {
                            continue;
                        }
                        if (t < min_t) {
                            min_t = t;
                            which_ellip = e;
                        }
                    } else {
                        var large = t[0];
                        var small = t[1];
                        if (large < 1) {
                            continue;
                        }
                        if (small >= 1) {
                            if (small < min_t) {
                                min_t = small;
                                which_ellip = e;
                            }
                        } else {
                            if (large < min_t) {
                                min_t = large;
                                which_ellip = e;
                            }
                        }
                    }
                }
                if (mode == PART1 && min_t != 1000000) {
                    c.change(
                        inputEllipsoids[which_ellip].diffuse[0] * 255,
                        inputEllipsoids[which_ellip].diffuse[1] * 255,
                        inputEllipsoids[which_ellip].diffuse[2] * 255,
                        255);
                    drawPixel(imagedata, x * w, h - y * h, c);
                }
                if (mode == PART2 && min_t != 1000000) {
                    var surface = Vector.add(eye, Vector.scale(min_t, D));
                    var lVect = Vector.normalize(Vector.subtract(lightPos, surface));
                    var NVect = new Vector(2 * (surface.x - inputEllipsoids[which_ellip].x) / square(inputEllipsoids[which_ellip].a),
                        2 * (surface.y - inputEllipsoids[which_ellip].y) / square(inputEllipsoids[which_ellip].b),
                        2 * (surface.z - inputEllipsoids[which_ellip].z) / square(inputEllipsoids[which_ellip].c)
                    );
                    NVect = Vector.normalize(NVect);
                    var NdotL = Vector.dot(lVect, NVect);
                    NdotL = Math.max(0, NdotL);

                    var VVect = Vector.normalize(Vector.subtract(eye, surface));

                    var HVect = Vector.normalize(Vector.add(VVect, lVect));

                    var NHn = Math.pow(Vector.dot(NVect, HVect), inputEllipsoids[which_ellip].n);
                    NHn = Math.max(0, NHn);

                    var shade = false;

                    if (withshade) {
                        for (var e = 0; e < n; e++) {
                            if (e == which_ellip) {
                                continue;
                            }
                            var center = new Vector(inputEllipsoids[e].x, inputEllipsoids[e].y, inputEllipsoids[e].z);
                            var ray = Vector.subtract(lightPos, surface);
                            var t = valueOf_t(surface, ray, center, inputEllipsoids[e].a, inputEllipsoids[e].b, inputEllipsoids[e].c);
                            if (typeof t == "number") {
                                if (t > 0 && t < 1) {
                                    shade = true;
                                    break;
                                }
                            }
                            if (typeof t == "object") {
                                if ((t[0] > 0 && t[0] < 1) || (t[1] > 0 && t[1] < 1)) {
                                    shade = true;
                                    break;
                                }
                            }
                        }
                    }


                    ambColor.r = inputEllipsoids[which_ellip].ambient[0] * 255;
                    ambColor.g = inputEllipsoids[which_ellip].ambient[1] * 255;
                    ambColor.b = inputEllipsoids[which_ellip].ambient[2] * 255;

                    difColor.r = inputEllipsoids[which_ellip].diffuse[0] * 255 * NdotL;
                    difColor.g = inputEllipsoids[which_ellip].diffuse[1] * 255 * NdotL;
                    difColor.b = inputEllipsoids[which_ellip].diffuse[2] * 255 * NdotL;

                    speColor.r = inputEllipsoids[which_ellip].specular[0] * 255 * NHn;
                    speColor.g = inputEllipsoids[which_ellip].specular[1] * 255 * NHn;
                    speColor.b = inputEllipsoids[which_ellip].specular[2] * 255 * NHn;

                    var p_color = new Color();
                    if (withshade) {
                        if (shade) {
                            p_color = ambColor;
                        } else {
                            p_color.add(ambColor).add(difColor).add(speColor);
                        }
                    } else {
                        p_color.add(ambColor).add(difColor).add(speColor);
                    }
                    p_color.a = 255;

                    drawPixel(imagedata, x * w, h - y * h, p_color);
                }
            }
        }
        context.putImageData(imagedata, 0, 0);
    }
}


function square(x) {
    return x * x;
}

function valueOf_t(E, D, C, ea, eb, ec) {
    var a = square(D.x) / square(ea) + square(D.y) / square(eb) + square(D.z) / square(ec);
    var b = (2 * D.x * (E.x - C.x)) / square(ea) + (2 * D.y * (E.y - C.y)) / square(eb) + (2 * D.z * (E.z - C.z)) / square(ec);
    var c = square(E.x - C.x) / square(ea) + square(E.y - C.y) / square(eb) + square(E.z - C.z) / square(ec) - 1;
    var delta = b * b - 4 * a * c;
    if (delta < 0) {
        return false;
    } else if (delta === 0) {
        return -b / (2 * a);
    } else {
        return [(-b + Math.sqrt(delta)) / (2 * a), (-b - Math.sqrt(delta)) / (2 * a)];
    }
}

// draw 2d projections read from the JSON file at class github
function drawInputEllipsoidsUsingArcs(context) {
    var inputEllipsoids = getInputEllipsoids();


    if (inputEllipsoids != String.null) {
        var c = new Color(0, 0, 0, 0); // the color at the pixel: black
        var w = context.canvas.width;
        var h = context.canvas.height;
        var n = inputEllipsoids.length;
        //console.log("number of ellipsoids: " + n);

        // Loop over the ellipsoids, draw each in 2d
        for (var e = 0; e < n; e++) {
            context.fillStyle =
                "rgb(" + Math.floor(inputEllipsoids[e].diffuse[0] * 255)
                + "," + Math.floor(inputEllipsoids[e].diffuse[1] * 255)
                + "," + Math.floor(inputEllipsoids[e].diffuse[2] * 255) + ")"; // diffuse color
            context.save(); // remember previous (non-) scale
            context.translate(w * inputEllipsoids[e].x, h * inputEllipsoids[e].y); // translate ellipsoid to ctr
            context.scale(1, inputEllipsoids[e].b / inputEllipsoids[e].a); // scale by ellipsoid ratio
            context.beginPath();
            context.arc(0, 0, Math.round(w * inputEllipsoids[e].a), 0, 2 * Math.PI);
            context.restore(); // undo scale before fill so stroke width unscaled
            context.fill();
            //console.log(context.fillStyle);
            //console.log("x: "+Math.round(w*inputEllipsoids[e].x));
            //console.log("y: "+Math.round(h*inputEllipsoids[e].y));
            //console.log("a: "+Math.round(w*inputEllipsoids[e].a));
            //console.log("b: "+Math.round(h*inputEllipsoids[e].b));
        } // end for ellipsoids
    } // end if ellipsoids found
} // end draw input ellipsoids


/* main -- here is where execution begins after window load */


function main_part2() {
    var canvas = document.getElementById("viewport");
    // Get the canvas and context
    var context = canvas.getContext("2d");
    var eye = new Vector(0.5, 0.5, -0.5);

    // Create the image
    //drawRandPixels(context);
    // shows how to draw pixels

    //drawRandPixelsInInputEllipsoids(context);
    // shows how to draw pixels and read input file

    // drawInputEllipsoidsUsingArcs(context);
    // shows how to read input file, but not how to draw pixels

    raycasting(context, eye, PART2, NO_SHADE);
}

function main_part1() {
    var canvas = document.getElementById("viewport");
    // Get the canvas and context
    var context = canvas.getContext("2d");
    var eye = new Vector(0.5, 0.5, -0.5);

    // Create the image
    //drawRandPixels(context);
    // shows how to draw pixels

    //drawRandPixelsInInputEllipsoids(context);
    // shows how to draw pixels and read input file

    // drawInputEllipsoidsUsingArcs(context);
    // shows how to read input file, but not how to draw pixels

    raycasting(context, eye, PART1, NO_SHADE);
}

function shade() {
    var canvas = document.getElementById("viewport");
    // Get the canvas and context
    var context = canvas.getContext("2d");
    var eye = new Vector(0.5, 0.5, -0.5);

    // Create the image
    //drawRandPixels(context);
    // shows how to draw pixels

    //drawRandPixelsInInputEllipsoids(context);
    // shows how to draw pixels and read input file

    // drawInputEllipsoidsUsingArcs(context);
    // shows how to read input file, but not how to draw pixels

    raycasting(context, eye, PART2, WITH_SHADE);
}
